diff --git a/chrome/installer/mac/signing/signing.py b/chrome/installer/mac/signing/signing.py
index cd93959385debe65d04c0a4664f638173da54b75..70a1d7741908ee9481bd2026ec1d493c086f7e7d 100644
--- a/chrome/installer/mac/signing/signing.py
+++ b/chrome/installer/mac/signing/signing.py
@@ -8,9 +8,11 @@ bundle that need to be signed, as well as providing utilities to sign them.
 
 import copy
 import os.path
+import collections
 
 from . import commands
 from .model import CodeSignOptions, CodeSignedProduct, VerifyOptions
+from signing_helper import AddBravePartsForSigning, GenerateBraveWidevineSigFile
 
 _PROVISIONPROFILE_EXT = '.provisionprofile'
 _PROVISIONPROFILE_DEST = 'embedded.provisionprofile'
@@ -136,7 +138,9 @@ def get_parts(config):
             library_basename.replace('.dylib', ''),
             verify_options=VerifyOptions.DEEP)
 
-    return parts
+    ordered_parts = collections.OrderedDict(parts)
+    AddBravePartsForSigning(ordered_parts, config)
+    return ordered_parts
 
 
 def get_installer_tools(config):
@@ -180,7 +184,7 @@ def sign_part(paths, config, part):
         part: The |model.CodeSignedProduct| to sign. The product's |path| must
             be in |paths.work|.
     """
-    command = ['codesign', '--sign', config.identity]
+    command = ['codesign', '--force', '--sign', config.identity]
     if config.notary_user:
         # Assume if the config has notary authentication information that the
         # products will be notarized, which requires a secure timestamp.
@@ -272,6 +276,7 @@ def sign_chrome(paths, config, sign_framework=False):
                 continue
             sign_part(paths, config, part)
 
+        GenerateBraveWidevineSigFile(paths, config, parts['framework'])
         # Sign the framework bundle.
         sign_part(paths, config, parts['framework'])
 
